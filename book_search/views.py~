from django.shortcuts import render
from django.contrib.auth.models import Group, User
import queryfuncs as qf
from django.shortcuts import render
from book_search.models import BookGenre
import queryfuncs as qf
from forms import UserForm, BookForm, BookGForm, EditorForm, EditionForm, PsuedonymForm, AuthorForm
from django.contrib.auth import authenticate, login, logout
from django.http import HttpResponseRedirect, HttpResponse
from django.contrib.auth.decorators import login_required
from models import *

import logging
from django.utils import simplejson
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s %(levelname)-8s %(message)s',
                    datefmt='%a, %d %b %Y %H:%M:%S',
                    filename='book.log',
                    filemode='a')

def get_account(requests):
	u = User.objects.all()
	d= {}
	for num, obj in enumerate(u):
		d.update({num:{'fname':obj.first_name,'lname':obj.last_name,'username':obj.username}})
	data = simplejson.dumps(d)
	return HttpResponse(data, mimetype='application/json')



# Create your views here.
def home(request):
	return render(request, 'home.html', {})


def results(request):
	if request.GET['type_is'] == "1":
		term = request.GET['term']
		search = request.GET['various']
		if request.GET['term'] == "Author":
			return render(request, 'results.html', {'result':qf.search_author(request.GET['various']),'term':term, 'search':search})
		elif request.GET['term'] == "Title":
			return render(request, 'results.html', {'result':qf.search_title(request.GET['various']),'term':term, 'search':search})
		elif request.GET['term'] == "Publisher":
			return render(request, 'results.html', {'result':qf.search_pub(request.GET['various']),'term':term, 'search':search})
	elif request.GET['type_is'] == "2":
		return render(request, 'results.html', {'result':qf.search_genre(request.GET['genre']), 'genre':request.GET['genre']})
	elif request.GET['type_is'] == "3":
		return render(request, 'results.html', {'result':qf.feeling_lucky(), 'lucky':request.GET['lucky']})

def search(request):
	user_form = UserForm()
	genres = BookGenre.objects.values('genre').distinct()
	return render(request, 'search.html', { 'genrelist': genres, 'user_form': user_form})

def add_book(request):
	if request.method == 'POST':

		bookg_form = BookGForm(data=request.POST)
		editor_form = EditorForm(data=request.POST)
		edition_form = EditionForm(data=request.POST)
		psu_form = PsuedonymForm(data=request.POST)
		author_form = AuthorForm(data=request.POST)
		book_form = BookForm(data=request.POST)

		if book_form.is_valid():
			book_form.save()
			logging.info("The follow fields were added (See line below):")
			logging.info(book_form.changed_data)
		else:
			logging.warning(book_form.errors)


		if author_form.is_valid():
			author_form.save()
			logging.info("The follow fields were added (See line below):")
			logging.info(author_form.changed_data)
		else:
			logging.warning(author_form.errors)


		bookid = Book.objects.latest('book_id')
		authorid = Author.objects.latest('author_id')

		edition_form.data['book_id'] = str(bookid)
		bookg_form.data['book_id'] = str(bookid)
		psu_form.data['author_id'] = str(authorid)

		if bookg_form.is_valid():
			bookg_form.save()
			logging.info("The follow fields were added (See line below):")
			logging.info(bookg_form.changed_data)
		else:
			logging.warning(bookg_form.errors)

		if edition_form.is_valid():
			edition_form.save()
			logging.info("The follow fields were added (See line below):")
			logging.info(edition_form.changed_data)
		else:
			logging.warning(edition_form.errors)

		editor = Editor(isbn=Edition.objects.latest('isbn'), editor_name=request.POST['editor_name'])
		editor.save()

			
		if psu_form.is_valid():
			psu_form.save()
			logging.info("The follow fields were added (See line below):")
			logging.info(psu_form.changed_data)
		else:
			logging.warning(psu_form.errors)

		return HttpResponse("saved!")

@login_required
def add_book_page(request):
	bookg_form = BookGForm()
	editor_form = EditorForm()
	edition_form = EditionForm()
	psu_form = PsuedonymForm()
	author_form = AuthorForm()
	book_form = BookForm()
	return render(request, 'add_book.html', {'book_form':book_form, 'bookg_form':bookg_form,'edition_form':edition_form,'editor_form':editor_form, 'psu_form':psu_form, 'author_form':author_form})


def logreg(request):
	user_form = UserForm()
	return render(request, 'logreg.html', { 'user_form': user_form})

def register(request):
	if request.method == 'POST':
		user_form = UserForm(data=request.POST)
		if user_form.is_valid():
			user = user_form.save()
			user.set_password(user.password)
			user.save()
			username = request.POST['username']
			password = request.POST['password']
			user = authenticate(username=username, password=password)
			login(request, user)
			g = Group.objects.get(name='subscribed') 
			g.user_set.add(user)
			return HttpResponseRedirect('/home/')
		else:
			return HttpResponse(user_form.errors)

def loger(request):
	# Like before, obtain the context for the user's request.
	# If the request is a HTTP POST, try to pull out the relevant information.
	if request.method == 'POST':
		username = request.POST['username']
		password = request.POST['password']
		user = authenticate(username=username, password=password)
		if user:
			print "here"
			# Is the account active? It could have been disabled.
			if user.is_active:

			# If the account is valid and active, we can log the user in.
			# We'll send the user back to the homepage.
				login(request, user)
				return HttpResponseRedirect('/home/')
			else:
			# An inactive account was used - no logging in!
				return HttpResponse("account is disabled.")
		else:
			return HttpResponse("Incorrect username or password")

@login_required
def log_out(request):
	logout(request)
	return HttpResponseRedirect('/login/')





